---
import { getAllPosts, getUniqueTags, getTaxonomyWithCounts } from "@/utils/getData";
import { slugify } from "@/utils/commonFunctions";
import PageLayout from "@/layouts/PageLayout.astro";
import Badge from "@/components/ui/Badge.astro";
import Link from "@/components/ui/Link.astro";
import Container from "@/components/layout/Container.astro";
import PageHeader from "@/components/layout/PageHeader.astro";

export async function getStaticPaths() {
  const allPosts = await getAllPosts();
  const uniqueTags = getUniqueTags(allPosts);
  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts
      .filter((post) => post.data.tags?.includes(tag))
      .sort((a, b) => b.data.publishedDate.valueOf() - a.data.publishedDate.valueOf());
    return {
      params: { slug: slugify(tag) },
      props: { posts: filteredPosts, tag },
    };
  });
}

const { posts, tag } = Astro.props;
const allPosts = await getAllPosts();

const {
  allItems: allTags,
  itemCounts: tagCounts 
} = getTaxonomyWithCounts(allPosts, 'tags');

// is link active
const currentPath = Astro.url.pathname;
const isActive = (link: string) => 
  currentPath === link || currentPath === link + "/";

---
<PageLayout>
  <Container outerClass="max-w-4xl mx-auto w-full px-6 py-2">
    <PageHeader title={`Posts tagged with #${tag}`} subtitle="Explore posts by this tag." />
    <div class="py-8">
      <div class="mb-6">
        <h2 class="text-xl font-semibold mb-2">All Tags</h2>
        <ul class="flex flex-wrap gap-4">
          {allTags.map((tag) => (
            <Badge
                  size="sm"
                  style="outline"
                  class={`text-muted-txt font-semibold ${isActive(`/tags/${slugify(tag)}`) ? 'bg-secondary-bg' : 'bg-gray-200 text-gray-800'}`}
                >
                  <Link
                    href={`/tags/${tag}`}
                    class=""
                  > 
                    #{tag}
                    { tagCounts[tag] > 1 && (
                      <span class="text-xs font-normal">
                        &nbsp;{tagCounts[tag]} post{tagCounts[tag] > 1 && "s"}
                      </span>
                    )}
                  </Link>
                </Badge>
          ))}
        </ul>
      </div>
      {posts.length > 0 ? (
        posts.map((post) => (
          <article class="mb-6">
            <h2 class="text-xl font-semibold">
              <a href={`/articles/${post.id}`}>{post.data.title}</a>
            </h2>
            <p class="text-gray-600">{post.data.description}</p>
          </article>
        ))
      ) : (
        <p>No posts found for this tag.</p>
      )}
    </div>
  </Container>
</PageLayout>