---
import { render } from 'astro:content';
import PageLayout from '@/layouts/PageLayout.astro';
import { getFormattedDate } from '@/utils/commonFunctions';
import type { CollectionEntry } from 'astro:content';
import Container from '@/components/layout/Container.astro';
import RenderMarkdown from './RenderMarkdown.astro';
import Badge from '../ui/Badge.astro';

interface Props {
  post: CollectionEntry<'blog'>
  isSearchable?: boolean
}

const { post, isSearchable = false } = Astro.props

const { data: frontmatter } = post
const { Content, headings, remarkPluginFrontmatter } = await render(post);

const title = frontmatter.title
const description = frontmatter.description
const coverImage = frontmatter.coverImage
const pubDate = frontmatter.publishedDate.toISOString()
const isDraft = frontmatter.isDraft
---
<PageLayout>
  <Container outerClass="max-w-5xl">
    <section class="post-head pb-6 mx-auto max-w-3xl">
      <h1>{title}</h1>
      <div class="post-meta">
        <div class="post-date text-muted-txt py-3">
          {isDraft ? (
            <span class="draft">Draft</span>
          ) : (
            <>
              <time dateTime={pubDate}>{getFormattedDate(pubDate)}</time>
              {frontmatter.readingTime && (
                <span class="reading-time">{frontmatter.readingTime}</span>
              )}
            </>
          )}
        </div>
        {isSearchable && (
          <div class="post-search">
            <input type="text" placeholder="Search..." />
          </div>
        )}
        <div class="post-tags flex gap-2">
          {frontmatter.tags.map((tag) => (
            <a href={`/tags/${tag}`} class="tag" key={tag}>

              <Badge
                size="sm"
                style="outline"
                class="text-muted-txt"
                href={`/tags/${tag}`}
              >
                {tag}
              </Badge>
            </a>
          ))}
        </div>
      </div>
    </section>
    <section class="post-cover mb-6 group">
      {coverImage && (
        <img
          src={coverImage}
          alt={title}
          class="w-full h-auto rounded-lg object-cover shadow-xl transition"
        />
      )}
    <RenderMarkdown className="post-content max-w-3xl mx-auto">
      <Content />
    </RenderMarkdown>
  </Container>
</PageLayout>