---
import { Picture } from "astro:assets";
import type { ImageMetadata } from "astro";
import { tv } from "tailwind-variants";

const customImage = tv({
  base: "relative z-1 h-auto w-full object-cover transition block",
  variants: {
    size: {
      default: "",
      wide: "lg:w-[calc(100%+20vw)] lg:max-w-none lg:mx-[-10vw] ",
    },
    variant: {
      default: "",
      rounded: "rounded-lg",
    },
  },
});

type Props = {
  src: string | ImageMetadata;
  alt: string;
  width?: number;
  height?: number;
  basePath?: string;
  class?: string;
  size?: "default" | "wide";
  variant?: "default" | "rounded";
  caption?: string;
};

const {
  src,
  alt,
  width = 600,
  height = 400,
  basePath = "",
  class: className,
  variant = "rounded",
  size = "default",
  caption
} = Astro.props as Props;

const images = import.meta.glob<{ default: ImageMetadata }>(
  '/src/content/**/*.{jpg,jpeg,png,webp,svg,avif}'
);

const isExternal = typeof src === "string" && src.startsWith("http");
const isImageObject = typeof src === "object" && "src" in src;
const fallbackImage = (await import('/src/assets/placeholder.jpg')).default;

let resolvedImage: ImageMetadata | string = fallbackImage;

if (isImageObject) {
  resolvedImage = src as ImageMetadata;
} else if (isExternal) {
  resolvedImage = src as string;
} else if (typeof src === "string") {
  const base = basePath.replace(/^\/|\/$/g, "");
  const expectedPath = `/src/content/${base}/${src}`;
  const normalizedPath = `/src/content/${src.replace(/^\/?src\/content\//, "")}`;

  const imageLoader = images[expectedPath] || images[normalizedPath];
  if (imageLoader) {
    try {
      resolvedImage = (await imageLoader()).default;
    } catch (e) {
      console.warn(`[CustomImage] Failed to load ${normalizedPath}`, e);
    }
  } else {
    console.warn(`[CustomImage] Image not found for key: ${normalizedPath}`);
  }
}
---

<figure class="mb-5 lg:mb-8 break-inside-avoid">
  <Picture
    src={resolvedImage}
    alt={alt}
    width={width}
    height={height}
    loading="lazy"
    decoding="auto"
    format="webp, avif"
    class={customImage({ size, variant, class: className })}
  />
  {caption && (
    <figcaption class="mt-2 text-sm text-center text-content-muted sm:text-base md:text-[1rem] leading-snug">
      {caption}
    </figcaption>
  )}
</figure>